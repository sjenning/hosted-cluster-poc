# For a simple AWS configuration, you should only need to set the
# PARENT_DOMAIN for your own configuration. All other defaults should
# just work.


# the domain of the existing public hosted zone that should contain the
# user cluster's public records
# (*configuration required)
export PARENT_DOMAIN=example.com

# namespace in the managed cluster in which to deploy the control plane
export NAMESPACE=hosted

# none, aws, or openstack
export PLATFORM=aws

# the base domain for the cluster
export BASE_DOMAIN="${NAMESPACE}.${PARENT_DOMAIN}"

# the name external name on which to connect to the user cluster API server
# IMPACT: kube-apiserver cert generation and admin.kubeconfig server URL
export EXTERNAL_API_DNS_NAME="api.${BASE_DOMAIN}"

# the subdomain to be used for the ingress router
export INGRESS_SUBDOMAIN="apps.${BASE_DOMAIN}"

# the name external name on which to connect to the managed openvpn server
export EXTERNAL_OPENVPN_DNS_NAME="vpn.${BASE_DOMAIN}"

# the external port on which to connect to the user cluster API server
# IMPACT: admin.kubeconfig server URL
# On AWS, defaults to 6443
export EXTERNAL_API_PORT=6443

# the external port on which to connect to the managed openvpn server
export EXTERNAL_OPENVPN_PORT=1194

# the cluster IP to use for openshift-apiserver
export API_CLUSTERIP=172.30.0.20

# OKD/OCP release image from which to get component image pull specs
export RELEASE_IMAGE=$(curl -s "https://origin-release.svc.ci.openshift.org/api/v1/releasestream/4.2.0-0.okd/latest" | jq -r .pullSpec)

# the external port on which to connect to the user cluster API server
# IMPACT: admin.kubeconfig server URL
export API_NODEPORT=31123

# the external port on which to connect to the managed openvpn server
export OPENVPN_NODEPORT=31124

# Nodeport for the router's HTTP endpoint
export ROUTER_NODEPORT_HTTP=32123

# Nodeport for the router's HTTPS endpoint
export ROUTER_NODEPORT_HTTPS=32124

# dynamically set the EXTERNAL_API_IP_ADDRESS created by the contrib/aws/setup-infrastructure.sh script
REPODIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
if [[ -f "${REPODIR}/config_api_ip.sh" ]]; then
  source "${REPODIR}/config_api_ip.sh"
fi

# number of replicas for all ha compentry (typically 3)
export REPLICAS=3
